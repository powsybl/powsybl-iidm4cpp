/**
 * Copyright (c) 2019, RTE (http://www.rte-france.com)
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

def maintainers = 'mathieu.bague@rte-france.com'

/**
 * Return true if a docker image exists, false otherwise
 */
def dockerImageExists(name) {
    return sh(script: 'docker images -q ' + name, returnStdout: true).trim() != ""
}

/**
 * Delete a docker image
 */
def dockerImageDelete(name) {
    sh(script: 'docker rmi -f ' + name)
}

/**
 * Build a docker image to compile the project
 */
def buildImage(os, clean) {
    // Define the docker image
    def dockerImage = 'powsybl-iidm:' + os

    // Cleanup a previous image
    if (clean && dockerImageExists(dockerImage)) {
        dockerImageDelete(dockerImage)
    }

    // Build the image
    args = '--file ./docker/Dockerfile.' + os
    args += ' ./docker'
    docker.build(dockerImage, args)
}

node('powsybl-rh72') {

    try {
        stageDevin('Cloning git repository') {
            gitCheckout {}
        }

        stageDevin('alpine', params.buildAlpine) {
            buildImage('alpine', params.cleanup)
        }

        stageDevin('centos', params.buildCentos) {
            buildImage('centos', params.cleanup)
        }

        stageDevin('sonar', params.buildSonar) {
            buildImage('sonar', params.cleanup)
        }

        stageDevin('ubuntu', params.buildUbuntu) {
            buildImage('ubuntu', params.cleanup)
        }

    } catch (Exception e) {
        notify {
            to = maintainers
            errorMsg = e.toString()
        }
        throw e
    } finally {
        step([$class: 'WsCleanup'])
    }
}
